{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","width","setWidth","radius","setRadius","type","setType","type2","setType2","type3","setType3","type4","setType4","color","setColor","className","style","borderColor","borderWidth","borderStyle","borderRadius","onChange","value","currentTarget","min","max","id","onInput","background","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAwGeA,MArGf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,OAEcF,mBAAS,IAFvB,mBAENG,EAFM,KAECC,EAFD,OAGYJ,mBAAS,SAHrB,mBAGNK,EAHM,KAGDC,EAHC,OAIYN,mBAAS,SAJrB,mBAINO,EAJM,KAIAC,EAJA,OAKYR,mBAAS,UALrB,mBAKNS,EALM,KAKAC,EALA,OAMYV,mBAAS,UANrB,mBAMNW,EANM,KAMAC,EANA,OAOYZ,mBAAS,WAPrB,mBAONa,EAPM,KAOAC,EAPA,KAQb,OACE,yBAAKC,UAAU,OACb,yBAAMA,UAAU,WACZ,yBAAKA,UAAU,OACf,4CAAkBd,EAAlB,OACA,4CAAkBY,EAAlB,KACA,4CAAkBR,EAAlB,IAAyBE,EAAzB,IAAiCE,EAAjC,IAAyCE,EAAzC,KACA,6CAAmBR,EAAnB,SAGJ,yBAAKY,UAAU,QACb,yBAAKA,UAAU,SAASC,MAAO,CAACC,YAAY,GAAD,OAAIJ,GAAQK,YAAY,GAAD,OAAIjB,EAAJ,MAAekB,YAAY,GAAD,OAAId,EAAJ,YAAYE,EAAZ,YAAqBE,EAArB,YAA8BE,GAASS,aAAa,GAAD,OAAIjB,EAAJ,SAC/I,yBAAKY,UAAU,YACX,yBAAKA,UAAU,WACb,oCACA,2BAAOM,SAAU,SAACC,GAASpB,EAASoB,EAAMC,cAAcD,QAASjB,KAAK,QAAQmB,IAAI,IAAIC,IAAI,MAAMV,UAAU,SAASW,GAAG,aAExH,yBAAKX,UAAU,WACb,qCACA,2BAAOM,SAAU,SAACC,GAASlB,EAAUkB,EAAMC,cAAcD,QAASjB,KAAK,QAAQmB,IAAI,IAAIC,IAAI,MAAMV,UAAU,SAASW,GAAG,aAEzH,yBAAKX,UAAU,QACf,yBAAKA,UAAU,WACb,kCACA,4BAAQO,MAAOjB,EAAMgB,SAAU,SAACC,GAAShB,EAAQgB,EAAMC,cAAcD,SACnE,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,QAAd,mBACA,4BAAQA,MAAM,UAAd,mBAGJ,yBAAKP,UAAU,WACb,oCACA,4BAAQO,MAAOf,EAAOc,SAAU,SAACC,GAASd,EAASc,EAAMC,cAAcD,SACrE,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,QAAd,mBACA,4BAAQA,MAAM,UAAd,mBAGJ,yBAAKP,UAAU,WACb,qCACA,4BAAQO,MAAOb,EAAOY,SAAU,SAACC,GAASZ,EAASY,EAAMC,cAAcD,SACrE,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,QAAd,mBACA,4BAAQA,MAAM,UAAd,mBAGJ,yBAAKP,UAAU,WACb,mCACA,4BAAQO,MAAOX,EAAOU,SAAU,SAACC,GAASV,EAASU,EAAMC,cAAcD,SACrE,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,UAAd,iBACA,4BAAQA,MAAM,QAAd,mBACA,4BAAQA,MAAM,UAAd,oBAIJ,yBAAKP,UAAU,WACb,oCACA,2BAAOY,QAAS,SAACL,GAASR,EAASQ,EAAMC,cAAcD,QAASN,MAAO,CAACY,WAAW,GAAD,OAAIf,GAAQA,MAAc,SAARA,GAA4B,YAAVA,EAAqB,QAAQ,SAAUS,MAAOT,EAAOR,KAAK,cCpF1KwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9556bb23.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [width,setWidth] = useState(10);\n  const [radius,setRadius] = useState(10);\n  const [type,setType]   = useState('solid');\n  const [type2,setType2] = useState('solid');\n  const [type3,setType3] = useState('double');\n  const [type4,setType4] = useState('double');\n  const [color,setColor] = useState('#111111');\n  return (\n    <div className=\"App\">\n      <div  className=\"css-box\">\n          <div className=\"css\">\n          <p>border-width: {width}px;</p>\n          <p>border-color: {color};</p>\n          <p>border-style: {type} {type2} {type3} {type4};</p>\n          <p>border-radius: {radius}px;</p>\n        </div>\n      </div>\n      <div className=\"main\">\n        <div className=\"border\" style={{borderColor:`${color}`,borderWidth:`${width}px`, borderStyle:`${type} ${type2} ${type3} ${type4}`, borderRadius:`${radius}px`} }/>\n        <div className=\"controls\">\n            <div className=\"control\">\n              <p>width</p>\n              <input onChange={(value)=>{setWidth(value.currentTarget.value)}} type=\"range\" min=\"1\" max=\"100\" className=\"slider\" id=\"myRange\"/>            \n            </div>\n            <div className=\"control\">\n              <p>Radius</p>\n              <input onChange={(value)=>{setRadius(value.currentTarget.value)}} type=\"range\" min=\"1\" max=\"100\" className=\"slider\" id=\"myRange\"/>            \n            </div>\n            <div className=\"grid\">\n            <div className=\"control\">\n              <p>Top</p>\n              <select value={type} onChange={(value)=>{setType(value.currentTarget.value)}}>\n                <option value=\"dotted\">   dotted    </option>\n                <option value=\"dashed\">   dashed    </option>\n                <option value=\"double\">   double    </option>\n                <option value=\"solid\">    solid     </option>\n                <option value=\"groove\">   groove    </option>\n                <option value=\"ridge\">    ridge     </option>\n                <option value=\"inset\">    inset     </option>\n                <option value=\"outset\">   outset    </option>\n                <option value=\"none\">     none      </option>\n                <option value=\"hidden\">   hidden    </option>\n              </select>\n            </div>\n            <div className=\"control\">\n              <p>Right</p>\n              <select value={type2} onChange={(value)=>{setType2(value.currentTarget.value)}}>\n                <option value=\"dotted\">   dotted    </option>\n                <option value=\"dashed\">   dashed    </option>\n                <option value=\"double\">   double    </option>\n                <option value=\"solid\">    solid     </option>\n                <option value=\"groove\">   groove    </option>\n                <option value=\"ridge\">    ridge     </option>\n                <option value=\"inset\">    inset     </option>\n                <option value=\"outset\">   outset    </option>\n                <option value=\"none\">     none      </option>\n                <option value=\"hidden\">   hidden    </option>\n              </select>\n            </div>\n            <div className=\"control\">\n              <p>Bottom</p>\n              <select value={type3} onChange={(value)=>{setType3(value.currentTarget.value)}}>\n                <option value=\"dotted\">   dotted    </option>\n                <option value=\"double\">   double    </option>\n                <option value=\"dashed\">   dashed    </option>\n                <option value=\"solid\">    solid     </option>\n                <option value=\"groove\">   groove    </option>\n                <option value=\"ridge\">    ridge     </option>\n                <option value=\"inset\">    inset     </option>\n                <option value=\"outset\">   outset    </option>\n                <option value=\"none\">     none      </option>\n                <option value=\"hidden\">   hidden    </option>\n              </select>\n            </div>\n            <div className=\"control\">\n              <p>Left</p>\n              <select value={type4} onChange={(value)=>{setType4(value.currentTarget.value)}}>\n                <option value=\"dotted\">   dotted    </option>\n                <option value=\"dashed\">   dashed    </option>\n                <option value=\"double\">   double    </option>\n                <option value=\"solid\">    solid     </option>\n                <option value=\"groove\">   groove    </option>\n                <option value=\"ridge\">    ridge     </option>\n                <option value=\"inset\">    inset     </option>\n                <option value=\"outset\">   outset    </option>\n                <option value=\"none\">     none      </option>\n                <option value=\"hidden\">   hidden    </option>\n              </select>\n            </div>\n            </div>\n            <div className=\"control\">\n              <p>Color</p>\n              <input onInput={(value)=>{setColor(value.currentTarget.value)}} style={{background:`${color}`,color:color==='#111' || color === '#111111'? 'white':'black'}} value={color} type='text'/>\n            </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}