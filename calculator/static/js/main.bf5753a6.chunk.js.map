{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","operator","setOperator","number","setNumber","number2","setNumber2","onClick","value","temp","toString","replace","temp2","tecla","currentTarget","textContent","parseFloat","length","concat","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPA6GeA,MA1Gf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAMPC,EAAU,SAACC,GACf,IAAIC,EAAON,EAAOO,WAClBD,EAAOA,EAAKE,QAAQ,IAAK,IACzB,IAAIC,EAAQP,EAAQK,WACpBE,EAAQA,EAAMD,QAAQ,IAAK,IAE3B,IAAIE,EAAQL,EAAMM,cAAcC,YAChC,GAAW,MAARF,GAAuB,MAARA,GAAuB,MAARA,GAAuB,MAARA,GAAsB,MAARA,GAAuB,MAARA,GAAsB,MAARA,GAAsB,MAARA,GAAsB,MAARA,GAAsB,MAARA,GAYrI,GAFAT,EAAUK,GACVH,EAAWM,GACC,KAATT,EACH,OAAOU,GACL,IAAK,KACHT,EAAU,IACVE,EAAW,IACXJ,EAAY,IACZ,MACF,IAAK,IACO,KAAVG,EACED,EAAU,IAAIE,EAAW,IAC3B,MACF,IAAK,MACHF,EAAU,IAAD,OAAKC,IACd,MACF,IAAK,IACH,OAAOJ,GACL,IAAK,IACHG,EAAUD,EAASE,GACnB,MACF,IAAK,IACHD,EAAUD,EAASE,GACnB,MACF,IAAK,IACHD,EAAUY,WAAWb,GAAUa,WAAWX,IAC1C,MACF,IAAK,IACHD,EAAUD,EAASE,GACnB,MACF,IAAK,IACHD,EAAWD,EAAO,IAAOE,GAM1BF,EAAOc,OAAO,GAAEb,EAAU,OAC7BE,EAAW,IACXJ,EAAY,IACZ,MACF,QACEA,EAAYW,QAnDA,KAAXZ,EACCE,EAAOc,OAAO,IAChBb,GAAWD,EAAOc,OAAO,GAAG,IAAI,GAAKd,EAAOc,OAAO,GAAKR,EAAK,GAAGN,EAAOe,OAAO,IAAKL,GAAOV,EAAOe,OAAOL,IAEvGR,EAAQY,OAAO,IAClBX,GAAYD,EAAQY,OAAO,GAAG,IAAI,GAAKZ,EAAQY,OAAO,GAAKL,EAAM,GAAGP,EAAQa,OAAO,IAAKL,GAAOR,EAAQa,OAAOL,KAiDnH,OACC,yBAAKM,UAAU,OACd,yBAAKA,UAAU,cACd,2BAAOX,MAAkB,KAAXP,EAAcE,EAAOE,IACnC,yBAAKc,UAAU,oBACd,yBAAKA,UAAU,wBACZ,yBAAKA,UAAU,sBACL,yBAAKZ,QAASA,EAASY,UAAU,gBAAyB,KAAThB,EAAY,KAAgB,KAAXF,EAAc,IAAc,KAAVI,EAAa,KAAK,KAC/G,yBAAKE,QAASA,EAASY,UAAU,gBAAjC,OACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,MAED,yBAAKA,UAAU,uBACd,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,OAIF,yBAAKA,UAAU,yBACN,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACR,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,KACA,yBAAKZ,QAASA,EAASY,UAAU,gBAAjC,UCzFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf5753a6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [operator, setOperator] = useState('')\n  const [number, setNumber] = useState('')\n  const [number2, setNumber2] = useState('')\n\n\n  const onClick = (value) =>{\n    var temp = number.toString()\n    temp = temp.replace(',', '')\n    var temp2 = number2.toString()\n    temp2 = temp2.replace(',', '')\n\n    var tecla = value.currentTarget.textContent;\n    if(tecla==='0' || tecla==='1' || tecla==='2' || tecla==='3' ||tecla==='4' || tecla==='5' ||tecla==='6' ||tecla===\"7\" ||tecla==='8' ||tecla==='9'){\n      if(operator==='')\n      {if(number.length<10)\n        setNumber((number.length+1)%4===0 && number.length>1 && temp>99?number.concat(','+ tecla):number.concat(tecla))}\n       else{\n      if(number2.length<10)\n      setNumber2((number2.length+1)%4===0 && number2.length>1 && temp2>99?number2.concat(','+ tecla):number2.concat(tecla))}\n      return\n    }\n\n    setNumber(temp)\n    setNumber2(temp2)\n    if(number!=='')\n    switch(tecla){\n      case 'AC':\n        setNumber('')\n        setNumber2('')\n        setOperator('')\n        break;\n      case 'C':\n        number2===''?\n          setNumber(''):setNumber2('')\n        break;\n      case '+/-':\n        setNumber(`-${number2}`)\n        break;\n      case '=':\n        switch(operator){\n          case '/':\n            setNumber(number / number2)\n            break\n          case 'x':\n            setNumber(number * number2)\n            break\n          case '+':\n            setNumber(parseFloat(number) + parseFloat(number2))\n            break\n          case '-':\n            setNumber(number - number2)\n            break\n          case '%':\n            setNumber((number/100) * number2)\n            break\n          default:\n            break\n                     \n        }\n        if(number.length>7)setNumber('ERR')\n        setNumber2('')\n        setOperator('')\n        break;\n      default:\n        setOperator(tecla)\n    }\n  }\n\treturn (\n\t\t<div className=\"App\">\n\t\t <div className=\"calculator\">\n\t\t\t <input value={operator===''?number:number2}/>\n\t\t\t\t<div className=\"box-operatorBody\">\n\t\t\t\t\t<div className=\"box-operatorBodyLeft\">\n\t\t\t\t\t\t\t\t<div className=\"box-operatorHeader\">\n                  <div onClick={onClick} className=\"box-operator\">{number===''?'AC':operator===''?'C':number2===''?'AC':'C'}</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">+/-</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">%</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"box-operatorNumbers\">\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">7</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">8</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">9</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">4</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">5</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">6</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">1</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">2</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">3</div>\n\t\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">0</div>\n\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div className=\"box-operatorBodyRight\">\n                <div onClick={onClick} className=\"box-operator\">/</div>\n\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">x</div>\n\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">-</div>\n\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">+</div>\n\t\t\t\t\t\t\t\t<div onClick={onClick} className=\"box-operator\">=</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t </div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}